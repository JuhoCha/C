#include <stdio.h>
/*
if문 뒤에 중괄호를 쓰는 경우 안쓰는 경우를 나누는 기준 등 말입니다.
중괄호 {} 사용하는 기준
- 블록을 정함 --> 코드가 미치는 영역을 결정
--> 변수의 적용되는 범위를 결정

함수 --> 주기와 받기
주기: 함수를 부르는 쪽에서 주는것(파라미터, 인수, 인자)
받기: 함수를 부른 쪽에서 함수로부터 받아오는 값(리턴값)
기본적으로 함수는 주기와 받기를 맞춰야 한다
엄밀하게 따지면 받기는 굳이 필요없다면 무시해도 된다.
단, 주기는 반드시 개수와 순서와 타입을 정확하게 맞춰야 한다.
*/
int myfunc();
// void 라는 것은 없다는 뜻..
// 함수의 파라미터로 void를 넣으면 파라미터가 없다는 의미
// 함수의 리턴값 타입을 void라고 적으면 --> 리턴값이 없다는 뜻
// 하지만, void라고 명시하지 않는 함수는... 타입을 적지 않은 함수는 자동으로 int 리턴값을 갖는다.
// --> 무조건 리턴타입을 명시한다.
???? myfunc();

int main(){
  
}

// int main 이라는 함수 쓰지 않고 다른 이름 써도 되나요?

// 엄밀하게 따지면 가능하다.
// 단, 다른 소스파일에서 main() 함수가 세팅되어 있어야만 한다.
// 또, 한 프로그램에서는 여러 파일로 소스를 만들더라도 main() 함수는 딱 1개만 있어야 한다.

// 문자열의 끝인 널문자는 '\0' 라고 써야 한다.


int main(void) {
  int num = 100;
  myfunc(100);
  
  //int num = 500; // 같은 영역이기 떄문에 중복선언 불가!!!
  printf("num: %d\n", num);
  if(num > 0) {
    if(....){
      
    }
    
  }
  for (int i=0; i<10; i++){
    // 10번 반복
  }
  int i=0;
  while(1) // 무한반복
  for(;;){ // 시작조건없음. 반복을 유지하는 조건 없음, 증감 없음
    // --> 결국 무한반복
    if(i>=10) break;
    i++;
  }
  {
    int num = 200;
    printf("num: %d\n", num);
  }
  printf("num: %d\n", num);
  {
    //int num = 300;
    printf("num: %d\n", num);
  }
  printf("num: %d\n", num);
  return 0;
}
