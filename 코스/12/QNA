1. 포인터 변수 선언시 메모리 위치 정해지나?
배열 100개주고 10개 할당하면 90개는 낭비되는 공간임
그래서 낭비하지 않기위해 malloc사용하여 메모리 필요한 만큼만 확보하고 
malloc 하면 내용 뭐가 들어가는지는 상관x, 그 메모리에만 사용가능한데 free 선언하면 다시 사용가능하다

변수의 메모리 할당: 변수는 선언하면 변수에 필요한 메모리 할당됨.
- 선언 시점: 코드 짤 때
- 사용 시점: 컴파일 해서 이때 필요한 공간 할당.
- 그러면 실행할 때 결정되는 것은? malloc()함수를 사용해 할당하는 메모리가 이때 결정됨. 

전역변수 - 프로그램이 시작할때부터 끝날때까지 확보되는 공간
지역변수 - 특정 함수의 시작부터 끝까지만 확보되는 공간

그렇다면 runtime에 결정되는 것은? 

main() 안에 있는 변수도 지역변수. 

할당한 메모리는 해제해줘야 한다. 즉 malloc()하고 free 해줘야 함. 

- 포인터 초기값 읽기 쓰기
--> 항상 쓰기가 먼저 선행되어야 한다.

int num = 100;
int* pnum;

pnum = &num; //정수가 들어갈 공간 파악
pnum = (int*)malloc(sizeof(int)); //이것도 정수가 들어갈 공간을 파악
printf("%p\n", &num);
printf('%d\n", *pnum);
-->이 코드는 동적할당 해주면 문제가 있는 코드임 왜? 
ㄴ> 쓰기가 먼저 되어야 하는데 공간의 값을 쓴적이 없음. 변수라는 것은 메모리 공간을 이야기 하는데 pnum

//*pnum의 의미는? pnum이라는 포인터 변수의 값, 즉 pnum이 포인팅 하는 공간을 찾아가서 거기에 있는 정수값을 접근하라는 의미.
즉, num이라고 표시하는 것과 동일한 효과를 가진다. 

//대부분의 경우 동적 메모리 할당이 좋은데 

FILE *fp;
fp = fopen("data.txt","r");
//fp에는 동적 할당된 파일 핸들러 구조체의 메모리 주소가 쓰기된다. fp = malloc(FILE 타입의 구조체 크기만큼)
fclose(fp); //fp에 동적 할당되었던 파일핸들러 구조체의 메모리를 할당시킴. 

포인터는 주소. 반드시 이 포인터가 어떤 주소인지 뭘 가리키는지 알아야 하는데, 
구조체 포인터는 타입의 크기만큼 동적 메모리 할당하고, 시작 주소값을 구조체 타입을 가리키는 포인터 타입으로 변환해 그 변수에 저장한다.

변수에 malloc 쓴거에 한번 더 쓰면 free못하고 사라짐 걍 안된다. 쓰지마라 
